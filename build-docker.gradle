/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:6.0.0'
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

docker {
    url.set(dockerServerUrl)
}

def devPostfix = releaseMode ? '' : '-dev'
def imageVersion = releaseMode ? "$version" : 'latest'
def dockerProjectName = "reportportal${devPostfix}/${project.name}".toLowerCase()
def maintainer = 'Andrei Varabyeu <andrei_varabyeu@epam.com>, Hleb Kanonik <hleb_kanonik@epam.com>'
def artifact = "$project.name-$project.version-exec.jar"
def startScriptCommand = "echo \'exec java \${JAVA_OPTS} -jar $artifact\' > /start.sh && chmod +x /start.sh"
def commandSeparator = ' && \\\n\t'

task createDockerfileDev(type: Dockerfile) {
    group = 'docker'
    dependsOn build
    destFile.set(file("${project.buildDir}${File.separator}${project.libsDirName}${File.separator}Dockerfile"))

    def command = ''
    if (project.hasProperty('dockerPrepareEnvironment') && dockerPrepareEnvironment?.trim()) {
        command = dockerPrepareEnvironment + commandSeparator;
    }
    if (project.hasProperty('sealightsSession') && sealightsSession?.trim()) {
        command += '# Init Sealights session' + commandSeparator +
                'apt-get install -qq unzip' + commandSeparator +
                'mkdir /plugins' + commandSeparator +
                'curl -o /plugins/sealights.zip https://agents.sealights.co/sealights-java/sealights-java-latest.zip' + commandSeparator +
                'unzip /plugins/sealights.zip -d /plugins' + commandSeparator +
                "echo '${sealightsToken}' > /sealights-token.txt" + commandSeparator +
                "echo '${sealightsSession}' > /sealights-session.txt" + commandSeparator
    }

    from('amazoncorretto:11.0.17')
    label(['version'           : "$project.version",
           'description'       : "$project.description",
           'maintainer'        : "$maintainer",
           'quay.expires-after': '1w']
    )
    addFile(artifact, artifact)
    runCommand(command + startScriptCommand)
    environmentVariable(['JAVA_OPTS': project.hasProperty('dockerJavaOptsDev') ? dockerJavaOptsDev : ''])
    volume('/tmp')
    exposePort(8080)
    instruction('ENTRYPOINT ./start.sh')
}

task createDockerfile(type: Dockerfile) {
    group = 'docker'
    destFile.set(file("${project.projectDir}${File.separator}Dockerfile"))

    def command = ''
    def githubTokenArg = "GH_TOKEN"
    def downloadJarCommand = "wget --header=\"Authorization: Bearer \${GH_TOKEN}\" " +
            " -q https://maven.pkg.github.com/reportportal/${project.name}/com/epam/reportportal/${project.name}/${project.version}/${artifact}"

    if (project.hasProperty('dockerPrepareEnvironment') && dockerPrepareEnvironment?.trim()) {
        command = dockerPrepareEnvironment + commandSeparator
    }
    command += startScriptCommand + commandSeparator + downloadJarCommand

    from('alpine:latest')
    label(['version'    : "$project.version",
           'description': "$project.description",
           'maintainer' : "$maintainer"]
    )
    arg(githubTokenArg)
    runCommand(command)
    environmentVariable(['JAVA_OPTS': project.hasProperty('dockerJavaOpts') ? dockerJavaOpts : ''])
    volume('/tmp')
    exposePort(8080)
    instruction('ENTRYPOINT ./start.sh')
}

task buildDocker(type: DockerBuildImage) {
    group = 'docker'
    releaseMode ? dependsOn(createDockerfile) : dependsOn(createDockerfileDev)
    inputDir.set(file("${project.buildDir}${File.separator}${libsDirName}"))
    project.hasProperty('dockerTag') ? images.add(dockerTag) : images.add("${dockerProjectName}:$imageVersion")
}